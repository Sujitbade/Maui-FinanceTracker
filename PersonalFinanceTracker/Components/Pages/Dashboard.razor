@page "/dashboard"
@using PersonalFinanceTracker.Models
@inject NavigationManager Navigation

<MudContainer Class="mt-4">
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6" md="4">
            <MudCard Class="dashboard-card" >
                <MudCardContent>
                    <MudText Typo="Typo.h5">Total Balance</MudText>
                    <MudText Typo="Typo.h3">@totalBalance.ToString("C")</MudText>
                </MudCardContent>
                <MudCardStyle Class="bg-warning text-white text-center" />
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Class="dashboard-card">
                <MudCardContent>
                    <MudText Typo="Typo.h5">Total Inflows</MudText>
                    <MudText Typo="Typo.h3">@totalIncome.ToString("C")</MudText>
                </MudCardContent>
                <MudCardStyle Class="bg-success text-white text-center" />
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Class="dashboard-card">
                <MudCardContent>
                    <MudText Typo="Typo.h5">Total Outflows</MudText>
                    <MudText Typo="Typo.h3">@totalExpense.ToString("C")</MudText>
                </MudCardContent>
                <MudCardStyle Class="bg-danger text-white text-center" />
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenForm" Class="mt-4">Add Transaction</MudButton>

    <MudTable Items="transactions" Class="mt-3">
        <HeaderContent>
            <MudTh>Description</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Amount</MudTh>
            <MudTh>Type</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Description</MudTd>
            <MudTd>@context.Date.ToShortDateString()</MudTd>
            <MudTd>@context.Amount.ToString("C")</MudTd>
            <MudTd>@context.Type</MudTd>
        </RowTemplate>
    </MudTable>



    @if (showForm)
    {
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h5">Add Transaction</MudText>
                <MudTextField Label="Description" @bind-Value="newTransaction.Description" />
                <MudDatePicker Label="Date" Value="newTransaction.Date" ValueChanged="OnDateChanged" Max="DateTime.Today" />
                <MudTextField Label="Amount" @bind-Value="newTransaction.Amount" Type="TextFieldType.Number" Min="0" />

                <MudSelect Label="Type" @bind-Value="selectedType" T="string" Class="mt-3" OnValueChanged="UpdateTags">
                    <MudSelectItem Value=@("Income")>Income</MudSelectItem>
                    <MudSelectItem Value=@("Expense")>Expense</MudSelectItem>
                </MudSelect>

                <MudSelect Label="Tags" @bind-Value="selectedTag" T="string" Class="mt-3" OnValueChanged="UpdateTags">
                    @if (selectedType == "Income")
                    {
                        @foreach (var tag in newTransaction.IncomeTags)
                        {
                            <MudSelectItem Value="@tag">@tag</MudSelectItem>
                        }
                    }
                    else if (selectedType == "Expense")
                    {
                        @foreach (var tag in newTransaction.ExpenseTags)
                        {
                            <MudSelectItem Value="@tag">@tag</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveTransaction" Class="mt-3">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CloseForm" Class="mt-3">Cancel</MudButton>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private List<Transaction> transactions = new();
    private Transaction newTransaction = new();
    private string selectedType = "Income";
    private string selectedTag;
    private bool showForm;
    private decimal totalExpense;
    private decimal totalIncome;
    private decimal totalBalance;

    private string transactionsFilePath = Path.Combine(AppContext.BaseDirectory, "transactions.json");

    protected override void OnInitialized()
    {
        LoadTransactions();
        CalculateTotals();
    }

    private void OpenForm()
    {
        newTransaction = new Transaction();
        selectedTag = string.Empty;
        newTransaction.Date = DateTime.Today;
        showForm = true;
    }

    private void CloseForm()
    {
        showForm = false;
    }

    private void UpdateTags(string type)
    {
        // Logic to update tags based on transaction type
        if (type == "Income")
        {
            newTransaction.IncomeTags = new List<string> { "Salary", "Bonus" };
        }
        else if (type == "Expense")
        {
            newTransaction.ExpenseTags = new List<string> { "Food", "Transport", "Entertainment" };
        }
    }

    private void SaveTransaction()
    {
        if (!string.IsNullOrEmpty(newTransaction.Description) && newTransaction.Amount > 0)
        {
            newTransaction.Type = selectedType;

            // Update tags based on transaction type
            if (selectedType == "Income")
            {
                newTransaction.IncomeTags = new List<string> { selectedTag };
            }
            else
            {
                newTransaction.ExpenseTags = new List<string> { selectedTag };
            }

            transactions.Add(newTransaction);
            CalculateTotals();
            SaveTransactions();
        }

        CloseForm();
    }

    private void CalculateTotals()
    {
        totalIncome = transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
        totalExpense = transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
        totalBalance = totalIncome - totalExpense;
    }


    private void SaveTransactions()
    {
        var json = Newtonsoft.Json.JsonConvert.SerializeObject(transactions, Newtonsoft.Json.Formatting.Indented);
        System.IO.File.WriteAllText(transactionsFilePath, json);
    }

    private void LoadTransactions()
    {
        if (System.IO.File.Exists(transactionsFilePath))
        {
            var json = System.IO.File.ReadAllText(transactionsFilePath);
            transactions = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Transaction>>(json) ?? new List<Transaction>();
            CalculateTotals();
        }
    }

    private void OnDateChanged(DateTime newDate)
    {
        newTransaction.Date = newDate;
    }
}
