@page "/dashboard"
@using PersonalFinanceTracker.Models
@using PersonalFinanceTracker.Services
@inject AuthenticationService authStateService
@inject TransactionService transactionService
@inject UserBalanceService userBalanceService
@using MudBlazor

<h3>Dashboard</h3>

<MudGrid Spacing="3">
    <!-- Total Income -->
    <MudItem xs="12" sm="6" md="3">
        <MudCard Outlined="true" Class="p-1">
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="fw-bold">Total Income</MudText>
                <MudText Typo="Typo.h6" Class="text-success">@TotalIncome.ToString("C")</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Total Expense -->
    <MudItem xs="12" sm="6" md="3">
        <MudCard Outlined="true" Class="p-1">
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="fw-bold">Total Expense</MudText>
                <MudText Typo="Typo.h6" Class="text-danger">@TotalExpense.ToString("C")</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Current Balance -->
    <MudItem xs="12" sm="6" md="3">
        <MudCard Outlined="true" Class="p-1">
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="fw-bold">Total Balance</MudText>
                <MudText Typo="Typo.h6" Class="text-primary">@UserBalance.ToString("C")</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Donut Chart -->
    <MudItem xs="12" sm="6" md="6">
        <MudPaper Class="pa-4">
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@chartData" InputLabels="@chartLabels" />
        </MudPaper>
    </MudItem>
</MudGrid>

<MudPaper Class="p-3 mt-4" Elevation="1">
    <MudTable Items="transactions" SortLabel="Sort By" FixedHeader="true" Height="300px">
        <HeaderContent>
            <MudTh>Description</MudTh>
            <MudTh>Date</MudTh>
            <MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Amount)">Amount</MudTableSortLabel>
            <MudTh>Type</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Description</MudTd>
            <MudTd>@context.Date.ToShortDateString()</MudTd>
            <MudTd>@context.Amount.ToString("C")</MudTd>
            <MudTd>@context.Type</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>



@code {
    private decimal TotalIncome => transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
    private decimal TotalExpense => transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
    private decimal UserBalance;
    private decimal Debt => debts.Sum(d => d.Amount);

    // Chart data and labels
    private double[] chartData => new double[] { (double)TotalIncome, (double)TotalExpense, (double)Debt };
    private string[] chartLabels => new string[] { "Total Income", "Total Expense", "Debt" };

    // Transactions list
    private List<Transaction> transactions = new List<Transaction>();
    private Transaction newTransaction = new Transaction();
    private List<Debt> debts = new List<Debt>(); // Correcting variable name
    private string selectedTransactionType = "Income"; // Default type
    private bool isFormValid => !string.IsNullOrWhiteSpace(newTransaction.Description) && newTransaction.Amount > 0;

    // Called when component initializes
    protected override async Task OnInitializedAsync()
    {
        var currentUser = authStateService.GetAuthenticatedUser();
        if (currentUser != null)
        {
            UserBalance = await userBalanceService.GetUserBalanceAsync(currentUser.UserId);
            transactions = await transactionService.GetTransactionsAsync(currentUser.UserId);
            debts = await debtService.GetDebtsAsync(currentUser.UserId);
        }
    }

    }
}
